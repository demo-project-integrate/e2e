name: E2E Tests

on:
  repository_dispatch:
    types: [trigger_e2e]

jobs:
  start_frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Frontend
        env:
          AZURE_SSH_FRONTEND_KEY: ${{ secrets.FRONTEND_VM_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_FRONTEND_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.FRONTEND_VM_USER }}@${{ secrets.FRONTEND_VM_HOST }} \
            "cd frontend && \
             git pull origin main && \
             npm install && \
             nohup npm run dev -- --host > frontend.log 2>&1 & echo \$! > frontend.pid && \
             exit 0" &

      - name: Wait for Frontend to be Available
        run: |
          until curl -s http://${{ secrets.FRONTEND_VM_HOST }}:8081 >/dev/null; do
            echo "Waiting for frontend..."
            sleep 5
          done

  start_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Start Backend
        env:
          AZURE_SSH_BACKEND_KEY: ${{ secrets.BACKEND_VM_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_BACKEND_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.BACKEND_VM_USER }}@${{ secrets.BACKEND_VM_HOST }} \
            "cd backend && \
             sudo mvn clean install -DskipTests && \
             sudo docker-compose up -d --build" &

      - name: Wait for Backend to be Available
        run: |
          until curl -s http://${{ secrets.BACKEND_VM_HOST }}:8081/api/product >/dev/null; do
            echo "Waiting for backend..."
            sleep 5
          done

  clone_e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH for Azure VM
        run: |
          mkdir -p ~/.ssh
          echo "$FRONTEND_VM_KEY" > ~/.ssh/id_rsa_azure
          chmod 600 ~/.ssh/id_rsa_azure
          ssh-keyscan -H ${{ secrets.FRONTEND_VM_HOST }} >> ~/.ssh/known_hosts
        env:
          FRONTEND_VM_KEY: ${{ secrets.FRONTEND_VM_KEY }}

      - name: Clone E2E Repo
        env:
          FRONTEND_VM_KEY: ${{ secrets.FRONTEND_VM_KEY }}
          FRONTEND_VM_USER: ${{ secrets.FRONTEND_VM_USER }}
          FRONTEND_VM_HOST: ${{ secrets. FRONTEND_VM_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$FRONTEND_VM_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.FRONTEND_VM_USER }}@${{ secrets.FRONTEND_VM_HOST }} \
            "cd .ssh/ && \
             rm -rf config && \
             cd ../ && \
             chmod 600 ~/.ssh/id_rsa_e2e && \
             echo -e 'Host github.com\n  HostName github.com\n  IdentityFile ~/.ssh/id_rsa_e2e' >> ~/.ssh/config && \
             git clone git@github.com:${{ github.repository }}.git e2e || \
             (cd e2e && git pull origin main)"
      
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [start_frontend, start_backend, clone_e2e]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Run Cypress Tests on E2E VM
      - name: Run Cypress Tests
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.E2E_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_SSH_KEY }}
          script: |
            cd /home/${{ secrets.AZURE_VM_USER }}/e2e-tests
            git pull origin main
            npm install
            npx cypress run > cypress.log 2>&1

  stop_frontend:
    runs-on: ubuntu-latest
    needs: e2e-tests  # Run this only after E2E tests
    if: always() 
    steps:
      - name: Stop Frontend
        env:
          AZURE_SSH_FRONTEND_KEY: ${{ secrets.FRONTEND_VM_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_FRONTEND_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.FRONTEND_VM_USER }}@${{ secrets.FRONTEND_VM_HOST }} \
            "pkill -f 'node .*vite' || true" || true

  stop_backend:
    runs-on: ubuntu-latest
    needs: e2e-tests  # Run this only after E2E tests
    if: always() 
    steps:
      - name: Stop Backend
        env:
          AZURE_SSH_BACKEND_KEY: ${{ secrets.BACKEND_VM_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$AZURE_SSH_BACKEND_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.BACKEND_VM_USER }}@${{ secrets.BACKEND_VM_HOST }} \
            "cd backend && \
             sudo docker-compose down" || true
